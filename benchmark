#!/bin/bash

print_usage() {
    echo "Runs tests for different configurations and create statistics."
    echo "Usage: $0 -h"
    echo "       $0 [options] --flag1 min1 max1 [--flag2 min2 max2 ...]"
    echo "Options:"
    echo "    -h        This help message."
    echo "    -x        The process to execute (default=$process)."
    echo "    -n        The number of times each configuration is run (default=$numberOfRuns)."
    echo "    -l        The level to run the test on. Can be added multiple times."
    echo "    -L        A file containing a list of levels to use. Can be added multiple times."
    echo
}

printHeader() {
    echo -n "level;"
    while [ $# -gt 0 ]; do
        echo -n "$1;"
        shift 3
    done
    echo "expanded nodes;real time;processor time"
}

runTest() {
    for level in "${levels[@]}"; do
        local sum=(0 0 0)
        for ((i=0; i<numberOfRuns; ++i)); do
            local result=($("$process" --output-format='%expanded-nodes% %total-real-time:ms% %total-processor-time:ms%' "$level" "$@"))

            for ((j=0; j < ${#sum[@]}; ++j)); do
                ((sum[j] += result[j]))
            done
        done
        echo -n "$level;"
        for arg in "$@"; do
            echo -n "${arg#*=};"
        done
        for value in "${sum[@]}"; do
            echo -n "$((value / ${#value[@]}));"
        done
        echo
    done
}

runWithParameter() {
    local accumulated="$1"
    shift

    if [ "$#" -eq 0 ]; then
        runTest $accumulated
        return
    fi

    local parameter="$1"
    local min="$2"
    local max="$3"
    shift 3

    local value
    for ((value=min; value <= max; ++value)); do
        runWithParameter "$accumulated $parameter=$value" "$@"
    done
}

# -----------------------------------------------------------------------------

process=./bin/sokoban
numberOfRuns=1
levels=()
while getopts ":hx:n:l:L:" Option; do
    case $Option in
    h)
        print_usage
        exit
        ;;
    n)
        numberOfRuns=$OPTARG
        ;;
    x)
        process=$OPTARG
        ;;
    l)
        levels+=($OPTARG)
        ;;
    L)
        file=$OPTARG
        dir=$(dirname $OPTARG)
        while read file; do
            levels+=("$dir/$file")
        done < <(grep '\S' "$file")
    esac
done

shift $(($OPTIND - 1))

# -----------------------------------------------------------------------------

printHeader "$@"
runWithParameter "" "$@"

